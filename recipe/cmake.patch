diff --git i/CMakeLists.txt w/CMakeLists.txt
index 49dca64..116964e 100644
--- i/CMakeLists.txt
+++ w/CMakeLists.txt
@@ -19,29 +19,35 @@ file(GLOB sminaserver
 	"src/server/*.cpp"
 )
 
-set (CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_CXX_EXTENSIONS OFF)
 set(CMAKE_OSX_ARCHITECTURES "arm64;x86_64")
 
-message(${CMAKE_CURRENT_BINARY_DIR})
-# Add a custom command that produces version.cpp, plus
-# a dummy output that's not actually produced, in order
-# to force version.cmake to always be re-run before the build
-add_custom_command(
-    OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/_version.cpp
-    BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/version.cpp           
-    COMMAND ${CMAKE_COMMAND} -P
-            ${CMAKE_SOURCE_DIR}/CMake/version.cmake)
-add_custom_command(
-    OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/version.cpp
-    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_version.cpp)
-set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/_version.cpp PROPERTIES SYMBOLIC TRUE)
+# message(${CMAKE_CURRENT_BINARY_DIR})
+# # Add a custom command that produces version.cpp, plus
+# # a dummy output that's not actually produced, in order
+# # to force version.cmake to always be re-run before the build
+# add_custom_command(
+#      OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/_version.cpp
+#      BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/version.cpp           
+#      COMMAND ${CMAKE_COMMAND} -P
+#              ${CMAKE_SOURCE_DIR}/CMake/version.cmake)
+# add_custom_command(
+#      OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/version.cpp
+#      DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_version.cpp)
+# set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/_version.cpp PROPERTIES SYMBOLIC TRUE)
 
 add_library(libsmina
     ${sminasrc}
 )
 set_target_properties(libsmina PROPERTIES OUTPUT_NAME "smina")
+# from https://sourceforge.net/p/openbabel/mailman/message/29256777/
+if(WIN32)
+    target_compile_definitions(libsmina PUBLIC USING_DYNAMIC_LIBS)
+endif(WIN32)
 target_include_directories(libsmina PUBLIC src/lib/ src/lib/CommandLine2)
-set(Boost_NO_BOOST_CMAKE ON)  #apparently required for newer boosts?
+# set(Boost_NO_BOOST_CMAKE ON)  #apparently required for newer boosts?
 find_package(Boost REQUIRED  COMPONENTS 
   iostreams 
   timer 
